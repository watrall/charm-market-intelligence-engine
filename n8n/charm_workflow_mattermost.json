{
  "name": "CHARM Market Intelligence (Slim) \u2014 with Mattermost Notify",
  "nodes": [
    {
      "parameters": {
        "path": "charm/run",
        "options": {}
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        140,
        360
      ]
    },
    {
      "parameters": {
        "cronExpression": "0 8 * * 1,3,5"
      },
      "id": "Cron",
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        140,
        200
      ]
    },
    {
      "parameters": {
        "command": "bash -lc \"cd /data/CHARM-Market-Intelligence-Engine && source .venv/bin/activate && python scripts/pipeline.py\""
      },
      "id": "Exec",
      "name": "Execute Pipeline",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        420,
        280
      ]
    },
    {
      "parameters": {
        "filePath": "/data/CHARM-Market-Intelligence-Engine/data/processed/analysis.json",
        "options": {}
      },
      "id": "ReadAnalysis",
      "name": "Read analysis.json",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        640,
        120
      ]
    },
    {
      "parameters": {
        "filePath": "/data/CHARM-Market-Intelligence-Engine/data/processed/insights.md",
        "options": {}
      },
      "id": "ReadInsights",
      "name": "Read insights.md",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        640,
        440
      ]
    },
    {
      "parameters": {
        "options": {
          "dataIsBase64": false,
          "toJson": true
        },
        "setAllData": false,
        "binaryPropertyName": "data",
        "dataPropertyName": "analysis"
      },
      "id": "BinToJsonAnalysis",
      "name": "Binary \u2192 JSON (analysis)",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        820,
        120
      ]
    },
    {
      "parameters": {
        "options": {
          "dataIsBase64": false,
          "toJson": false
        },
        "setAllData": false,
        "binaryPropertyName": "data",
        "dataPropertyName": "insights"
      },
      "id": "BinToTextInsights",
      "name": "Binary \u2192 Text (insights)",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        820,
        440
      ]
    },
    {
      "parameters": {
        "filePath": "/data/CHARM-Market-Intelligence-Engine/data/processed/analysis_prev.json",
        "options": {},
        "binaryData": true
      },
      "id": "ReadPrev",
      "name": "Read previous analysis (optional)",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        640,
        260
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "options": {
          "dataIsBase64": false,
          "toJson": true
        },
        "setAllData": false,
        "binaryPropertyName": "data",
        "dataPropertyName": "prev"
      },
      "id": "BinToJsonPrev",
      "name": "Binary \u2192 JSON (prev)",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        820,
        260
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "webhookUrl",
              "value": "ENTER_MATTERMOST_WEBHOOK_URL_HERE"
            },
            {
              "name": "dashboardUrl",
              "value": "ENTER_DASHBOARD_URL_HERE"
            },
            {
              "name": "mention",
              "value": ""
            },
            {
              "name": "thresholdSkillsCsv",
              "value": "ArcGIS,Section 106,NEPA"
            },
            {
              "name": "thresholdPercent",
              "value": "20"
            }
          ]
        },
        "options": {}
      },
      "id": "SetConfig",
      "name": "Notification Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1040,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "const analysis = items[0].json.analysis || {};\nconst insights = items[1].json.insights || \"\";\nconst prev = (items[2] && items[2].json.prev) ? items[2].json.prev : {};\nconst cfg = items[3].json;\n\nfunction top5(skills){\n  if (!Array.isArray(skills)) return \"(none)\";\n  return skills.slice(0,5).map(([s,c]) => `${s} (${c})`).join(\", \") || \"(none)\";\n}\nfunction idx(skills, name){\n  if (!Array.isArray(skills)) return -1;\n  return skills.findIndex(([s,_]) => (s||'').toLowerCase() === (name||'').toLowerCase());\n}\nfunction pctChange(curr, prev){\n  if (!prev || prev === 0) return 100;\n  return Math.round(((curr - prev) / prev) * 100);\n}\n\n// Extract values\nconst total = analysis.num_jobs || 0;\nconst orgs = analysis.unique_employers || 0;\nconst geo = analysis.geocoded || 0;\nconst skills = analysis.top_skills || [];\nconst prevSkills = (prev && prev.top_skills) ? prev.top_skills : [];\n\n// Threshold alerts\nconst alerts = [];\nconst list = (cfg.thresholdSkillsCsv || '').split(',').map(s => s.trim()).filter(Boolean);\nconst thresh = parseInt(cfg.thresholdPercent || '20', 10);\nfor (const s of list) {\n  const ci = idx(skills, s);\n  const pi = idx(prevSkills, s);\n  const c = ci >= 0 ? skills[ci][1] : 0;\n  const p = pi >= 0 ? prevSkills[pi][1] : 0;\n  if (p === 0 && c === 0) continue;\n  const pct = pctChange(c, p);\n  if (Math.abs(pct) >= thresh) {\n    const dir = pct > 0 ? \"\u2191\" : \"\u2193\";\n    alerts.push(`**${s}** ${dir} ${pct}% (now ${c}, was ${p})`);\n  }\n}\n\n// Zero-result alert\nif (total === 0) {\n  alerts.unshift(\"\u26a0\ufe0f No jobs scraped in this run. Check selectors or site availability.\");\n}\n\nconst mention = (cfg.mention || '').trim();\nconst preface = mention ? `${mention} ` : '';\n\nlet msg = `${preface}### \u2705 CHARM pipeline run complete\\n` +\n  `- Total postings: **${total}** | Employers: **${orgs}** | Geocoded: **${geo}**\\n` +\n  `- Top skills (first 5): ${top5(skills)}\\n` +\n  `- Dashboard: ${cfg.dashboardUrl || 'ENTER_DASHBOARD_URL_HERE'}\\n`;\n\nif (alerts.length) {\n  msg += `\\n**Alerts:**\\n- ${alerts.join('\\n- ')}\\n`;\n}\n\n// Brief from insights.md (trim to ~500 chars)\nconst briefIdx = insights.indexOf(\"## LLM Brief\");\nlet snip = \"\";\nif (briefIdx >= 0) snip = insights.slice(briefIdx, briefIdx + 800);\nelse snip = insights.slice(0, 800);\nif (snip) {\n  if (snip.length > 500) snip = snip.slice(0, 500) + \"\u2026\";\n  msg += `\\n**Brief:**\\n${snip}`;\n}\n\nreturn [{json: { text: msg, webhookUrl: cfg.webhookUrl }}];\n"
      },
      "id": "ComposeMessage",
      "name": "Compose Mattermost message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1240,
        260
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"webhookUrl\"]}}",
        "options": {},
        "jsonParameters": true,
        "authentication": "none",
        "queryParametersUi": {
          "parameter": []
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "text",
              "value": "={{$json[\"text\"]}}"
            }
          ]
        },
        "requestMethod": "POST"
      },
      "id": "HTTPNotify",
      "name": "POST \u2192 Mattermost",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1440,
        260
      ]
    },
    {
      "parameters": {
        "fileName": "/data/CHARM-Market-Intelligence-Engine/data/processed/analysis_prev.json",
        "dataPropertyName": "analysis"
      },
      "id": "WritePrev",
      "name": "Write analysis_prev.json",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        1040,
        120
      ]
    }
  ],
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "Execute Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Execute Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Pipeline": {
      "main": [
        [
          {
            "node": "Read analysis.json",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read previous analysis (optional)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read insights.md",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read analysis.json": {
      "main": [
        [
          {
            "node": "Binary \u2192 JSON (analysis)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Write analysis_prev.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary \u2192 JSON (analysis)": {
      "main": [
        [
          {
            "node": "Notification Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read previous analysis (optional)": {
      "main": [
        [
          {
            "node": "Binary \u2192 JSON (prev)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary \u2192 JSON (prev)": {
      "main": [
        [
          {
            "node": "Notification Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read insights.md": {
      "main": [
        [
          {
            "node": "Binary \u2192 Text (insights)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary \u2192 Text (insights)": {
      "main": [
        [
          {
            "node": "Notification Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notification Config": {
      "main": [
        [
          {
            "node": "Compose Mattermost message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose Mattermost message": {
      "main": [
        [
          {
            "node": "POST \u2192 Mattermost",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}